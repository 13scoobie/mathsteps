// The text to identify rules for each possible step that can be taken

module.exports = {
  NO_CHANGE: 'NO_CHANGE',

  REMOVE_PARENS: 'REMOVE_PARENS',
  COLLECT_LIKE_TERMS: 'COLLECT_LIKE_TERMS',
  COLLECT_AND_COMBINE_LIKE_TERMS: 'COLLECT_AND_COMBINE_LIKE_TERMS',

  UNARY_MINUS_TO_NEGATIVE_ONE: 'UNARY_MINUS_TO_NEGATIVE_ONE',
  ADD_COEFFICIENT_OF_ONE: 'ADD_COEFFICIENT_OF_ONE',
  ADD_EXPONENT_OF_ONE: 'ADD_EXPONENT_OF_ONE',
  GROUP_COEFFICIENTS: 'GROUP_COEFFICIENTS',
  COLLECT_EXPONENTS: 'COLLECT_EXPONENTS',
  MULTIPLY_COEFFICIENTS: 'MULTIPLY_COEFFICIENTS',
  ADD_POLYNOMIAL_TERMS: 'ADD_POLYNOMIAL_TERMS',
  MULTIPLY_POLYNOMIAL_TERMS: 'MULTIPLY_POLYNOMIAL_TERMS',
  REARRANGE_COEFF: 'REARRANGE_COEFF',
  REDUCE_EXPONENT_BY_ZERO: 'REDUCE_EXPONENT_BY_ZERO',
  REMOVE_EXPONENT_BY_ONE: 'REMOVE_EXPONENT_BY_ONE',

  SIMPLIFY_ARITHMETIC: 'SIMPLIFY_ARITHMETIC',
  ABSOLUTE_VALUE: 'ABSOLUTE_VALUE',
  SIMPLIFY_DIVISION: 'SIMPLIFY_DIVISION',
  RESOLVE_DOUBLE_MINUS: 'RESOLVE_DOUBLE_MINUS',
  DIVISION_BY_NEGATIVE_ONE: 'DIVISION_BY_NEGATIVE_ONE',
  DIVISION_BY_ONE: 'DIVISION_BY_ONE',
  MULTIPLY_BY_ZERO: 'MULTIPLY_BY_ZERO',
  REMOVE_ADDING_ZERO: 'REMOVE_ADDING_ZERO',
  REMOVE_MULTIPLYING_BY_ONE: 'REMOVE_MULTIPLYING_BY_ONE',
  REMOVE_MULTIPLYING_BY_NEGATIVE_ONE: 'REMOVE_MULTIPLYING_BY_NEGATIVE_ONE',

  DISTRIBUTE_NEGATIVE_ONE: 'DISTRIBUTE_NEGATIVE_ONE',
  DISTRIBUTE: 'DISTRIBUTE',
  SIMPLIFY_TERMS: 'SIMPLIFY_TERMS',

  COMMON_DENOMINATOR: 'COMMON_DENOMINATOR',
  SIMPLIFY_FRACTION: 'SIMPLIFY_FRACTION',
  MULTIPLY_DENOMINATORS: 'MULTIPLY_DENOMINATORS',
  MULTIPLY_NUMERATORS: 'MULTIPLY_NUMERATORS',
  ADD_NUMERATORS: 'ADD_NUMERATORS',
  REDUCE_ZERO_NUMERATOR: 'REDUCE_ZERO_NUMERATOR',
  DIVIDE_FRACTION_FOR_ADDITION: 'DIVIDE_FRACTION_FOR_ADDITION',
  SIMPLIFY_SIGNS: 'SIMPLIFY_SIGNS',
  COMBINE_NUMERATORS: 'COMBINE_NUMERATORS',
  ADD_FRACTIONS: 'ADD_FRACTIONS',
  MULTIPLY_FRACTIONS: 'MULTIPLY_FRACTIONS',
  CONVERT_INTEGER_TO_FRACTION: 'CONVERT_INTEGER_TO_FRACTION',
  MULTIPLY_BY_INVERSE: 'MULTIPLY_BY_INVERSE',
  BREAK_UP_FRACTION: 'BREAK_UP_FRACTION',

  FACTOR_INTO_PRIMES: 'FACTOR_INTO_PRIMES',
  GROUP_TERMS_BY_ROOT: 'GROUP_TERMS_BY_ROOT',
  CONVERT_MULTIPLICATION_TO_EXPONENT: 'CONVERT_MULTIPLICATION_TO_EXPONENT',
  CANCEL_EXPONENT_AND_ROOT: 'CANCEL_EXPONENT_AND_ROOT',
  CANCEL_EXPONENT: 'CANCEL_EXPONENT',
  CANCEL_ROOT: 'CANCEL_ROOT',
  COMBINE_UNDER_ROOT: 'COMBINE_UNDER_ROOT',
  NTH_ROOT_VALUE: 'NTH_ROOT_VALUE',
  DISTRIBUTE_NTH_ROOT: 'DISTRIBUTE_NTH_ROOT',
  EVALUATE_DISTRIBUTED_NTH_ROOT: 'EVALUATE_DISTRIBUTED_NTH_ROOT',
  CANCEL_TERMS: 'CANCEL_TERMS',

  SWAP_SIDES: 'SWAP_SIDES',
  ADD_TO_BOTH_SIDES: 'ADD_TO_BOTH_SIDES',
  SIMPLIFY_LEFT_SIDE: 'SIMPLIFY_LEFT_SIDE',
  SIMPLIFY_RIGHT_SIDE: 'SIMPLIFY_RIGHT_SIDE',
  SUBTRACT_FROM_BOTH_SIDES: 'SUBTRACT_FROM_BOTH_SIDES',
  MULTIPLY_TO_BOTH_SIDES: 'MULTIPLY_TO_BOTH_SIDES',
  DIVIDE_FROM_BOTH_SIDES: 'DIVIDE_FROM_BOTH_SIDES',
  MULTIPLY_BOTH_SIDES_BY_INVERSE_FRACTION: 'MULTIPLY_BOTH_SIDES_BY_INVERSE_FRACTION',
  MULTIPLY_BOTH_SIDES_BY_NEGATIVE_ONE: 'MULTIPLY_BOTH_SIDES_BY_NEGATIVE_ONE',

  STATEMENT_IS_TRUE: 'STATEMENT_IS_TRUE',
  STATEMENT_IS_FALSE: 'STATEMENT_IS_FALSE',
};
